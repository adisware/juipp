<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ output extension=".cs" #>
<#= "using juip.Events.Arguments;" #>
<#= "using juip.Events.Handlers;" #>
<#= "using juip.Views;" #>
<#= "using juip.app.ViewModels;" #>

namespace <#= "TargetName@juip.Views" #> 
{
   
    public partial class <#= "ApplicationView" #> : ApplicationViewBase {}
    
    public static class View
    {
             <#
                var views = System.IO.Directory.GetFiles(Host.ResolvePath(@"..\Views\"));
                foreach(var view in views)
                {
                    var fileName = System.IO.Path.GetFileName(view);
                    var className =  fileName.Split('.')[0];
                    if(fileName.EndsWith("View.ascx.cs") == false) continue;
             #>public static string <#= className #> = "juip.app.Views.<#= className #>";
             <#}#>
    }

    <# 
    var models = System.IO.Directory.GetFiles(Host.ResolvePath(@"..\ViewModels\")); 
    foreach(var model in models)
    {
        var className =  System.IO.Path.GetFileName(model).Split('.')[0];
        var handlerName =  string.Format("_{0}ActionPerformed", char.ToLower(className[0]) + className.Substring(1));
        if(className == "ViewModel") continue;
    #> 
        public partial class ApplicationView : IActionPerformer<<#= className #>> 
        {
            private ActionPerformedHandler<<#= className #>> <#= handlerName #>;
            event ActionPerformedHandler<<#= className #>> IActionPerformer<<#= className #>>.ActionPerformed
            {
                add
                {
                    <#= handlerName #> += value;
                    base.RaiseActionEventDelegates.Add(args => base.RaiseActionEvent(<#= handlerName #>, args as ActionPerformedEventArgs<<#= className #>>));
                }
                remove { if (<#= handlerName #> != null) <#= handlerName #> -= value; }
            }
        }
    <#
    }
    #>
} 


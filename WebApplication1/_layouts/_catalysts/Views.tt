<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ output extension=".cs" #>
<#= "using Org.Juipp.Core.Events.Arguments;" #>
<#= "using Org.Juipp.Core.Events.Handlers;" #>
<#= "using Org.Juipp.Core.Views;" #>
<#= "using WebApplication1._layouts.ViewModels;" #>

namespace <#= "WebApplication1._layouts.Views" #> 
{
   
    <# 
    var models = System.IO.Directory.GetFiles(Host.ResolvePath(@"..\ViewModels\"));
	#>public partial class <#= "View" #> : ViewBase 
	{
		<#
		if(models != null && models.Length > 0) 
	    foreach(var model in models)
        {
			var className =  System.IO.Path.GetFileName(model).Split('.')[0];
			var handlerName =  string.Format("_{0}BehaviorEventFired", char.ToLower(className[0]) + className.Substring(1));
			if(className == "ViewModel") continue;
		#>public <#= className #> <#= className #>
        {
            get { return base.RetrieveBindingElement<<#= className #>>(); }
            set { base.PersistBindingElement(value); }
        }
		<#
		}#>	
	}
    
    public static class ViewReference
    {
             <#
                var views = System.IO.Directory.GetFiles(Host.ResolvePath(@"..\Views\"));
				if(views != null && views.Length > 0)
                foreach(var view in views)
                {
                    var fileName = System.IO.Path.GetFileName(view);
                    var className =  fileName.Split('.')[0];
                    if(fileName.EndsWith("View.ascx.cs") == false) continue;
             #>public static string <#= className #> = "<#= className #>";
             <#}#>
    }

    <# 
	if(models != null && models.Length > 0) 
    foreach(var model in models)
    {
        var className =  System.IO.Path.GetFileName(model).Split('.')[0];
        var handlerName =  string.Format("_{0}BehaviorEventFired", char.ToLower(className[0]) + className.Substring(1));
        if(className == "ViewModel") continue;
    #> 
        public partial class View : IBehaviorEventSender<<#= className #>> 
        {
            private BehaviorEventHandler<<#= className #>> <#= handlerName #>;
            event BehaviorEventHandler<<#= className #>> IBehaviorEventSender<<#= className #>>.BehaviorEventFired
            {
                add
                {
                    <#= handlerName #> += value;
                    base.FireBehaviorEventDelegates.Add(args => base.FireBehaviorEvent(<#= handlerName #>, args as BehaviorEvent<<#= className #>>));
                }
                remove { if (<#= handlerName #> != null) <#= handlerName #> -= value; }
            }
        }
    <#
    }
    #>
} 

